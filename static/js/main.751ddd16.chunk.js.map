{"version":3,"sources":["ResizableTable.js","App.js","index.js"],"names":["data","team","standing","wins","losses","myCellRenderer","cellData","TableCell","padding","variant","Col","key","label","width","ResizableTable","useState","columns","setColumns","totalWidth","setTotalWidth","tableRef","useRef","myHeaderRenderer","dataKey","style","display","className","flex","fontWeight","axis","position","x","zIndex","onDrag","e","deltaX","widthHasChanged","map","column","newWidth","cursor","height","ref","headerHeight","rowCount","length","rowGetter","index","rowHeight","i","cellRenderer","headerRenderer","flexGrow","flexShrink","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.751ddd16.chunk.js","sourcesContent":["import React, { Fragment, useState, useRef } from \"react\"\nimport { AutoSizer, Table, Column } from \"react-virtualized\"\nimport { TableCell } from \"@material-ui/core\"\nimport Draggable, { DraggableEventHandler } from \"react-draggable\"\n\nconst data = [\n    { team: \"Team Liquid\", standing: 1, wins: 2, losses: 0 },\n    { team: \"Cloud 9\", standing: 1, wins: 2, losses: 0 },\n    { team: \"Evil Geniuses\", standing: 1, wins: 2, losses: 0 },\n    { team: \"Team SoloMid\", standing: 4, wins: 1, losses: 1 },\n    { team: \"Counter Logic Gaming\", standing: 4, wins: 1, losses: 1 },\n    { team: \"FlyQuest\", standing: 4, wins: 1, losses: 1 },\n    { team: \"Golden Guardians\", standing: 4, wins: 1, losses: 1 },\n    { team: \"Immortals\", standing: 8, wins: 0, losses: 2 },\n    { team: \"100 Thieves\", standing: 8, wins: 0, losses: 2 },\n    { team: \"Dignitas\", standing: 8, wins: 0, losses: 2 },\n];\n\nconst MIN_WIDTH = 40\n\nconst myCellRenderer = ({cellData}) => {\n    return (\n        <TableCell\n            padding=\"none\"\n            variant=\"body\"\n        >\n            {cellData}\n        </TableCell>\n    )\n}\n\nconst Col = (key, label, width) => { return { key: key, label: label, width: width} }\n\nconst ResizableTable = () => {\n\n    const [ columns, setColumns ] = useState([\n        Col(\"team\", \"Team\", 200),\n        Col(\"standing\", \"Standing\", 200),\n        Col(\"wins\", \"Wins\", 100),\n        Col(\"losses\", \"Losses\", 100)\n    ])\n    const [ totalWidth, setTotalWidth ] = useState(600)\n    let tableRef = useRef()\n\n    const myHeaderRenderer = ({ label, dataKey }) => {\n        return (\n            <Fragment key={dataKey}>\n                <TableCell padding=\"none\" variant=\"head\" style={{ display: \"flex\" }} >\n                    <div className=\"content\" style={{ flex: \"1\", fontWeight: \"bold\" }}>{label}</div>\n                    <Draggable\n                        axis=\"x\"\n                        position={{ x: 0 }}\n                        zIndex={9999}\n                        onDrag={(e, { deltaX }) => {\n                            let widthHasChanged = false\n                            setColumns(columns.map((column) => {\n                                if (column.label === label){\n                                    const newWidth = column.width + deltaX\n                                    if (newWidth >= MIN_WIDTH) {\n                                        widthHasChanged = true\n                                        return { ...column, width: newWidth } \n                                    }\n                                } \n                                return column\n                            }))\n                            if (widthHasChanged)\n                                setTotalWidth(totalWidth + deltaX)\n                        }}\n                    >\n                        <span \n                            className=\"btn\"\n                            style={{\n                                width: \"10px\",\n                                flex: \"0\",\n                                padding: \"0 2px\",\n                                cursor: \"col-resize\"\n                            }}\n                        >||</span>\n                    </Draggable>\n                </TableCell>\n            </Fragment> \n        )\n    }\n    \n    return (\n        <AutoSizer>\n            {({ height, width }) => {\n                return <Table\n                    ref={tableRef}\n                    headerHeight={30}\n                    height={300}\n                    rowCount={data.length}\n                    rowGetter={({index}) => data[index]}\n                    rowHeight={30}\n                    width={width}\n                >\n                    { columns.map(({ key, label, width }, i) => {\n                        return (<Column \n                            dataKey={key} \n                            label={label} \n                            width={width} \n                            cellRenderer={myCellRenderer} \n                            headerRenderer={myHeaderRenderer}\n                            flexGrow={0}\n                            flexShrink={0}\n                            key={i} />)\n                    }) }\n                </Table>\n            }}\n        </AutoSizer>\n    )\n}\n\nexport default ResizableTable","import React from 'react';\n\nimport ResizableTable from \"./ResizableTable\"\n\nfunction App () {\n  \treturn (\n\t\t<div className=\"App\">\n\t\t\t<ResizableTable />\n\t\t</div>\n\t);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport \"react-virtualized/styles.css\"\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}